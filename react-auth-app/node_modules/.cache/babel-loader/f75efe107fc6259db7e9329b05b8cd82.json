{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { Paper, Box, Grid, TextField, Typography, FormControlLabel, Checkbox, Button } from '@material-ui/core';\n\nconst App = () => {\n  _s();\n\n  const validationSchema = Yup.object().shape({\n    fullname: Yup.string().required('Fullname is required'),\n    username: Yup.string().required('Username is required').min(6, 'Username must be at least 6 characters').max(20, 'Username must not exceed 20 characters'),\n    email: Yup.string().required('Email is required').email('Email is invalid'),\n    password: Yup.string().required('Password is required').min(6, 'Password must be at least 6 characters').max(40, 'Password must not exceed 40 characters'),\n    confirmPassword: Yup.string().required('Confirm Password is required').oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\n  });\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    console.log(JSON.stringify(data, null, 2));\n  };\n};\n\n_s(App, \"ep0U873iQWSzFHUv2GTeqANlehw=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Laptop/PycharmProjects/useful/node-react/react-node-express-mysql/react-auth-app/src/components/login.component.js"],"names":["React","Fragment","useForm","Controller","yupResolver","Yup","Paper","Box","Grid","TextField","Typography","FormControlLabel","Checkbox","Button","App","validationSchema","object","shape","fullname","string","required","username","min","max","email","password","confirmPassword","oneOf","ref","acceptTerms","bool","register","control","handleSubmit","formState","errors","resolver","onSubmit","data","console","log","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,SACEC,KADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,UALF,EAMEC,gBANF,EAOEC,QAPF,EAQEC,MARF,QASO,mBATP;;AAYA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,gBAAgB,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,IAAAA,QAAQ,EAAEb,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CADgC;AAE1CC,IAAAA,QAAQ,EAAEhB,GAAG,CAACc,MAAJ,GACPC,QADO,CACE,sBADF,EAEPE,GAFO,CAEH,CAFG,EAEA,wCAFA,EAGPC,GAHO,CAGH,EAHG,EAGC,wCAHD,CAFgC;AAM1CC,IAAAA,KAAK,EAAEnB,GAAG,CAACc,MAAJ,GACJC,QADI,CACK,mBADL,EAEJI,KAFI,CAEE,kBAFF,CANmC;AAS1CC,IAAAA,QAAQ,EAAEpB,GAAG,CAACc,MAAJ,GACPC,QADO,CACE,sBADF,EAEPE,GAFO,CAEH,CAFG,EAEA,wCAFA,EAGPC,GAHO,CAGH,EAHG,EAGC,wCAHD,CATgC;AAa1CG,IAAAA,eAAe,EAAErB,GAAG,CAACc,MAAJ,GACdC,QADc,CACL,8BADK,EAEdO,KAFc,CAER,CAACtB,GAAG,CAACuB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAFQ,EAEqB,iCAFrB,CAbyB;AAgB1CC,IAAAA,WAAW,EAAExB,GAAG,CAACyB,IAAJ,GAAWH,KAAX,CAAiB,CAAC,IAAD,CAAjB,EAAyB,0BAAzB;AAhB6B,GAAnB,CAAzB;AAmBA,QAAM;AACJI,IAAAA,QADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJP,MAKFjC,OAAO,CAAC;AACVkC,IAAAA,QAAQ,EAAEhC,WAAW,CAACW,gBAAD;AADX,GAAD,CALX;;AASA,QAAMsB,QAAQ,GAAGC,IAAI,IAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAZ;AACD,GAFD;AAGD,CAhCD;;GAAMxB,G;UAyBAZ,O;;;KAzBAY,G","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\n\r\nimport {\r\n  Paper,\r\n  Box,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Button\r\n} from '@material-ui/core';\r\n\r\n\r\nconst App = () => {\r\n  const validationSchema = Yup.object().shape({\r\n    fullname: Yup.string().required('Fullname is required'),\r\n    username: Yup.string()\r\n      .required('Username is required')\r\n      .min(6, 'Username must be at least 6 characters')\r\n      .max(20, 'Username must not exceed 20 characters'),\r\n    email: Yup.string()\r\n      .required('Email is required')\r\n      .email('Email is invalid'),\r\n    password: Yup.string()\r\n      .required('Password is required')\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .max(40, 'Password must not exceed 40 characters'),\r\n    confirmPassword: Yup.string()\r\n      .required('Confirm Password is required')\r\n      .oneOf([Yup.ref('password'), null], 'Confirm Password does not match'),\r\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required')\r\n  });\r\n\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema)\r\n  });\r\n\r\n  const onSubmit = data => {\r\n    console.log(JSON.stringify(data, null, 2));\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}